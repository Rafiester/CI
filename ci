#!bin/bash
#
# PureCAFx Kernel Builder Script || For Continous Integration
#
# Copyright 2019, Ahmad Thoriq Najahi "Najahiii" <najahiii@outlook.co.id>
# Copyright 2019, alanndz <alanmahmud0@gmail.com>
# Copyright 2020, Dicky Herlambang "Nicklas373" <herlambangdicky5@gmail.com>
# Copyright 2016-2020, HANA-CI Build Project
# SPDX-License-Identifier: GPL-3.0-or-later

# Compiling For Mido Devices
		# Create Temporary Folder
		mkdir TEMP
						git clone --depth=1 -b dev/pcx https://github.com/Avarice12/kernel_xiaomi_mido-3.18 kernel

				# Define Kernel Scheduler
				KERNEL_SCHED="EAS"
				KERNEL_BRANCH="dev/pcx"

						git clone --depth=1 -b master https://github.com/Rafiester/AnyKernel3

# Kernel Enviroment
export ARCH=arm64
		KERNEL_BOT="Circle-CI"

# Clang environment
export CLANG_PATH=/root/proton-10/bin
export PATH=${CLANG_PATH}:${PATH}
export LD_LIBRARY_PATH="/root/proton-10/bin/../lib:$PATH"

# Kernel host environment
	export KBUILD_BUILD_USER=Rafiester
	export KBUILD_BUILD_HOST=${KERNEL_BOT}

# Kernel directory environment
		IMAGE="$(pwd)/kernel/out/arch/arm64/boot/Image.gz-dtb"
		KERNEL="$(pwd)/kernel"
		KERNEL_TEMP="$(pwd)/TEMP"
		CODENAME="mido"
		KERNEL_CODE="Mido"
		TELEGRAM_DEVICE="Xiaomi Redmi Note 4x"

# Kernel version environment
		KERNEL_REV="3.18"
		KERNEL_NAME="PureCAFx"

KERNEL_SUFFIX="Kernel"
KERNEL_DATE="$(TZ=Asia/Jakarta date +%Y%m%d-%H%M)"
		KERNEL_ANDROID_VER="10"
		KERNEL_TAG="Q"
		KERNEL_RELEASE="BETA"

# Telegram Bot
			TELEGRAM_BOT_ID=${telegram_bot_id}
			TELEGRAM_GROUP_ID=${telegram_group_aln_id}

TELEGRAM_FILENAME="${KERNEL_NAME}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"

# Import telegram bot environment
function bot_env() {
TELEGRAM_KERNEL_VER=$(cat ${KERNEL}/out/.config | grep Linux/arm64 | cut -d " " -f3)
TELEGRAM_UTS_VER=$(cat ${KERNEL}/out/include/generated/compile.h | grep UTS_VERSION | cut -d '"' -f2)
TELEGRAM_COMPILER_NAME=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILE_BY | cut -d '"' -f2)
TELEGRAM_COMPILER_HOST=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILE_HOST | cut -d '"' -f2)
TELEGRAM_TOOLCHAIN_VER=$(cat ${KERNEL}/out/include/generated/compile.h | grep LINUX_COMPILER | cut -d '"' -f2)
}

# Telegram Bot Service || Compiling Notification
function bot_template() {
curl -s -X POST https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendMessage -d chat_id=${telegram_group_aln_id} -d "parse_mode=HTML" -d text="$(
            for POST in "${@}"; do
                echo "${POST}"
            done
          )"
}

		# Telegram bot message || first notification
		function bot_first_compile() {
		bot_template  "<b>|| ${KERNEL_BOT} Build Bot ||</b>" \
                "" \
	        "<b>${KERNEL_NAME} Kernel build Start!</b>" \
	        "" \
 	        "<b>Build Status :</b><code> ${KERNEL_RELEASE} </code>" \
                "<b>Device :</b><code> ${TELEGRAM_DEVICE} </code>" \
	        "<b>Android Version :</b><code> ${KERNEL_ANDROID_VER} </code>" \
	        "" \
	        "<b>Kernel Scheduler :</b><code> ${KERNEL_SCHED} </code>" \
	        "<b>Kernel Branch :</b><code> ${KERNEL_BRANCH} </code>" \
                "<b>Latest commit :</b><code> $(git --no-pager log --pretty=format:'"%h - %s (%an)"' -1) </code>"
		}

# Telegram bot message || success notification
function bot_build_success() {
bot_template  "<b>|| ${KERNEL_BOT} Build Bot ||</b>" \
              "" \
	      "<b>${KERNEL_NAME} Kernel build Success!</b>"
}

# Telegram bot message || failed notification
function bot_build_failed() {
bot_template "<b>|| ${KERNEL_BOT} Build Bot ||</b>" \
              "" \
	      "<b>${KERNEL_NAME} Kernel build Failed!</b>" \
              "" \
              "<b>Compile Time :</b><code> $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)</code>"
}

# Compile Mido Begin
function compile_mido() {
	cd ${KERNEL}
	bot_first_compile
	cd ..

	START=$(TZ=Asia/Jakarta date +"%s")
	make -s -C ${KERNEL} ${CODENAME}_defconfig O=out
	PATH="/root/proton-10/bin/:${PATH}" \
        make -C ${KERNEL} -j$(nproc --all) -> ${KERNEL_TEMP}/compile.log O=out \
				CC=clang \
				CLANG_TRIPLE=aarch64-linux-gnu- \
				CROSS_COMPILE=aarch64-linux-gnu- \
				CROSS_COMPILE_ARM32=arm-linux-gnueabi-
	if ! [ -a $IMAGE ];
		then
			echo "kernel not found"
			END=$(TZ=Asia/Jakarta date +"%s")
			DIFF=$(($END - $START))
			cd ${KERNEL}
			bot_build_failed
			cd ..
			curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/compile.log"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument
			exit 1
	fi
	END=$(TZ=Asia/Jakarta date +"%s")
	DIFF=$(($END - $START))
	cd ${KERNEL}
	bot_build_success
	cd ..
	cp ${IMAGE} AnyKernel3
	anykernel
	kernel_upload
}

# AnyKernel
function anykernel() {
	cd AnyKernel3
	make -j4
	
		mv PureCAFx-Kernel-${KERNEL_CODE}-signed.zip  ${KERNEL_TEMP}/${KERNEL_NAME}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip
}

# Upload Kernel
function kernel_upload() {
	cd ${KERNEL}
			bot_complete_compile
			curl -F chat_id=${TELEGRAM_GROUP_ID} -F document="@${KERNEL_TEMP}/${KERNEL_NAME}-${KERNEL_SUFFIX}-${KERNEL_CODE}-${KERNEL_REV}-${KERNEL_SCHED}-${KERNEL_TAG}-${KERNEL_DATE}.zip"  https://api.telegram.org/bot${TELEGRAM_BOT_ID}/sendDocument			
}

# Compile Run
function run() {
		compile_mido
}

# Running
run
